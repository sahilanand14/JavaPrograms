minimization of dfa......



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int **transitionMap; // 2D array which is used to store state transitions. transitionMap[i][j] is the state reached when state i is given symbol j
int **partitionTransitionMap; // same as transitionMap, except row indices represent partition numbers, not state numbers
int startState; // The starting state. This is used as the root for DFS to eliminate unreachable states
long int reachable; // A bitset to represent states that are reachable
long int allStates; // A bitset to represent all states in the FSM
long int finalStates; // A bitset to represent final states in the FSM
long int nonFinalStates; // A bitset to represent non-final states in the FSM
long int *P; // array of partitions. Each partition is a bitset of states

void dfs(int v)
{
	reachable |= (1 << v);
	
	// Try exploring all paths..
	for(int i=0; i<26; i++)
		if((transitionMap[v][i] != -1) && ((reachable & (1 << transitionMap[v][i])) == 0))
		{
			dfs(transitionMap[v][i]);
		}
}


int main(){

	// We start off with no states
	finalStates = 0;
	allStates = 0;

	// Initialize our transition maps. We set transition[i][j] to be -1 in order to indicate that state/partition i does not transition when given symbol j

	transitionMap = (int**)malloc(64*sizeof(int*));
	for (int i = 0; i < 64; i++){
		transitionMap[i] = (int*) malloc(26*sizeof(int));
		for (int j = 0; j < 26; j++){
			transitionMap[i][j] = -1;
		}
	}

	partitionTransitionMap = (int**)malloc(64*sizeof(int*));
	for (int i = 0; i < 64; i++){
		partitionTransitionMap[i] = (int*) malloc(26*sizeof(int));
		for (int j = 0; j < 26; j++){
			partitionTransitionMap[i][j] = -1;
		}
	}

	// read start state
	char buff[125];
	fgets(buff, sizeof(buff), stdin);
	char *p = strtok(buff, " ");
	startState = atoi(p);

	// read final states
	fgets(buff, sizeof(buff), stdin);
	p = strtok(buff, " ");
	while (p != NULL)
	{
		int state = atoi(p);
		finalStates |= 1 << (state);
		p = strtok(NULL, " ");
	}


	// read transitions
	int from;
	char symbol;
	int to;
	while (fscanf(stdin, "%d %c %d", &from, &symbol, &to) != EOF) {
		transitionMap[from][symbol-'a'] = to; // add transition
		
		// add from and to states to the allStates bitset
		allStates |= (1 << from); 
		allStates |= (1 << to);
	}

	// initialize reachable bitset to 0 and run dfs to determine reachable states
	reachable = 0;
	dfs(startState);

	// filter unreachable states
	allStates &= reachable;
	finalStates &= reachable;

	// initialize array of partitions to include empty bitsets
	P =  (long int*) malloc(64*sizeof(long int));
	for (int i = 0; i < 64 ; i++){
		P[i] = 0; // no partition exists
	}

	// P should include two partitions to start: final states and non-final states
	nonFinalStates = allStates & ~finalStates;
	P[0] = finalStates;
	P[1] = nonFinalStates;

	int nextPartitionIndex = 2; // Store how many partitions have been added already

	// There will be at most 64 partitions. At each iteration, we operate on a partition and add at most 1 more partition 
	for (int i = 0; i < 64; i++){

		// A bitset for a new partition. This partition will include all states that are distinct from the state corresponding to the leftmost bit in P[i]
		long int newPartition = 0;

		// Done partitioning
		if (P[i] == 0){
			break;
		}

		// Try to find leftmost bit in the bitset. This loop will only run to its entirety once when that bit is found
		for (int j = 63; j >=  0; j--) {

			// Potential leftmost bit. If found, this bit will remain in the bit set.
			long int staticState = (long int) 1 << j;

			// Check if this state is in the current bitset
			if ((P[i] & (staticState)) != 0){

				// The lestmost bit state will be associated with this partition. Therefore, we must copy over the transitions for this state to the transitions for
				// the corresponding partition
				partitionTransitionMap[i] = transitionMap[j];


				// Check for states that should be removed from this partition. All states will be bits right of the staticState bit
				for (int k = j - 1; k >= 0; k -- ){

					// Potential state to remove
					long int otherState = (long int) 1 << k;

					// Check if this state is in the current bitset
					if ((P[i] & (otherState)) != 0){

						// Iterate across the entire alphabet and check if staticState and otherState can transition to different partitions.
						for (int l  = 0; l < 26; l++){

							int staticNext = -1; // next partition for static
							int otherNext = -1; // next partition for other

							for (int m = 0; m < nextPartitionIndex; m++){
								if ((P[m] & (1 << transitionMap[j][l])) != 0){
									staticNext = m;	//found static next
								}
								if ((P[m] & (1 << transitionMap[k][l])) != 0){
									otherNext = m; // found other next
								}
							}
													
							// If partitions differ, remove the other state and add it to the new partition. Then break, since we are done with this partition	
							if (transitionMap[j][l] != transitionMap[k][l] && (staticNext != otherNext)){
								P[i] &= ~(1 << k);
								newPartition |= (1 << k);
								break;
							} 
						}	
					}
				}
				break;
			}
		}

		// New partition exists. Add it to P and increment nextPartitionIndex
		if (newPartition != 0){
			P[nextPartitionIndex] = newPartition;
			nextPartitionIndex++;
		}
	}


	// find and print start partition
	int startPartition = 0;
	for (int i = 0; i < nextPartitionIndex; i ++){
		if ((P[i] & (1 << startState)) != 0 ){
			startPartition = i;
			break;
		}
	}

	printf("%d \n", startPartition);


	// find and print final partitions
	for (int i = 0; i < nextPartitionIndex; i++){
		if ((P[i] & finalStates) != 0){
			printf("%d ", i);
		}
	}
	printf("\n");


	// find and print all transitions
	for (int i = 0; i < nextPartitionIndex; i++){
		for (int j = 0; j < 26; j++) {
			if (partitionTransitionMap[i][j] != -1){
				for (int k = 0; k < nextPartitionIndex; k++){
					if ((P[k] & (1 << partitionTransitionMap[i][j])) != 0){
						printf("%d %c %d\n", i, j + 'a', k);
					}
				}
			}
		}
	}

	return 0;

}








llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll


FOR NFA TO DFA.

#include <cstdio>
#include <fstream>
#include <iostream>
#include <bitset>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <set>
#define MAX_NFA_STATES 10
#define MAX_ALPHABET_SIZE 10
using namespace std;
// Representation of an NFA state
class NFAstate
{
    public:
        int transitions[MAX_ALPHABET_SIZE][MAX_NFA_STATES];
        NFAstate()
        {
            for (int i = 0; i < MAX_ALPHABET_SIZE; i++)
                for (int j = 0; j < MAX_NFA_STATES; j++)
                    transitions[i][j] = -1;
        }
}*NFAstates;
// Representation of a DFA state
struct DFAstate
{
        bool finalState;
        bitset<MAX_NFA_STATES> constituentNFAstates;
        bitset<MAX_NFA_STATES> transitions[MAX_ALPHABET_SIZE];
        int symbolicTransitions[MAX_ALPHABET_SIZE];
};
set<int> NFA_finalStates;
vector<int> DFA_finalStates;
vector<DFAstate*> DFAstates;
queue<int> incompleteDFAstates;
int N, M; // N -> No. of stattes, M -> Size of input alphabet
// finds the epsilon closure of the NFA state "state" and stores it into "closure"
void epsilonClosure(int state, bitset<MAX_NFA_STATES> &closure)
{
    for (int i = 0; i < N && NFAstates[state].transitions[0][i] != -1; i++)
        if (closure[NFAstates[state].transitions[0][i]] == 0)
        {
            closure[NFAstates[state].transitions[0][i]] = 1;
            epsilonClosure(NFAstates[state].transitions[0][i], closure);
        }
}
// finds the epsilon closure of a set of NFA states "state" and stores it into "closure"
void epsilonClosure(bitset<MAX_NFA_STATES> state,
        bitset<MAX_NFA_STATES> &closure)
{
    for (int i = 0; i < N; i++)
        if (state[i] == 1)
            epsilonClosure(i, closure);
}
// returns a bitset representing the set of states the NFA could be in after moving
// from state X on input symbol A
void NFAmove(int X, int A, bitset<MAX_NFA_STATES> &Y)
{
    for (int i = 0; i < N && NFAstates[X].transitions[A][i] != -1; i++)
        Y[NFAstates[X].transitions[A][i]] = 1;
}
// returns a bitset representing the set of states the NFA could be in after moving
// from the set of states X on input symbol A
void NFAmove(bitset<MAX_NFA_STATES> X, int A, bitset<MAX_NFA_STATES> &Y)
{
    for (int i = 0; i < N; i++)
        if (X[i] == 1)
            NFAmove(i, A, Y);
}
int main()
{
    int i, j, X, Y, A, T, F, D;
    // read in the underlying NFA
    ifstream fin("NFA.txt");
    fin >> N >> M;
    NFAstates = new NFAstate[N];
    fin >> F;
    for (i = 0; i < F; i++)
    {
        fin >> X;
        NFA_finalStates.insert(X);
    }
    fin >> T;
    while (T--)
    {
        fin >> X >> A >> Y;
        for (i = 0; i < Y; i++)
        {
            fin >> j;
            NFAstates[X].transitions[A][i] = j;
        }
    }
    fin.close();
    // construct the corresponding DFA
    D = 1;
    DFAstates.push_back(new DFAstate);
    DFAstates[0]->constituentNFAstates[0] = 1;
    epsilonClosure(0, DFAstates[0]->constituentNFAstates);
    for (j = 0; j < N; j++)
        if (DFAstates[0]->constituentNFAstates[j] == 1 && NFA_finalStates.find(
                j) != NFA_finalStates.end())
        {
            DFAstates[0]->finalState = true;
            DFA_finalStates.push_back(0);
            break;
        }
    incompleteDFAstates.push(0);
    while (!incompleteDFAstates.empty())
    {
        X = incompleteDFAstates.front();
        incompleteDFAstates.pop();
        for (i = 1; i <= M; i++)
        {
            NFAmove(DFAstates[X]->constituentNFAstates, i,
                    DFAstates[X]->transitions[i]);
            epsilonClosure(DFAstates[X]->transitions[i],
                    DFAstates[X]->transitions[i]);
            for (j = 0; j < D; j++)
                if (DFAstates[X]->transitions[i]
                        == DFAstates[j]->constituentNFAstates)
                {
                    DFAstates[X]->symbolicTransitions[i] = j;
                    break;
                }
            if (j == D)
            {
                DFAstates[X]->symbolicTransitions[i] = D;
                DFAstates.push_back(new DFAstate);
                DFAstates[D]->constituentNFAstates
                        = DFAstates[X]->transitions[i];
                for (j = 0; j < N; j++)
                    if (DFAstates[D]->constituentNFAstates[j] == 1
                            && NFA_finalStates.find(j) != NFA_finalStates.end())
                    {
                        DFAstates[D]->finalState = true;
                        DFA_finalStates.push_back(D);
                        break;
                    }
                incompleteDFAstates.push(D);
                D++;
            }
        }
    }
    // write out the corresponding DFA
    ofstream fout("DFA.txt");
    fout << D << " " << M << "\n" << DFA_finalStates.size();
    for (vector<int>::iterator it = DFA_finalStates.begin(); it
            != DFA_finalStates.end(); it++)
        fout << " " << *it;
    fout << "\n";
    for (i = 0; i < D; i++)
    {
        for (j = 1; j <= M; j++)
            fout << i << " " << j << " "
                    << DFAstates[i]->symbolicTransitions[j] << "\n";
    }
    fout.close();
    return 0;
}